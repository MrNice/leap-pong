        group = new THREE.Object3D();
        scene.add( group );

        // Create particle objects for Three.js

        var particlesLength = 20000;

        var particles = new THREE.Geometry();

        function newpos( x, y, z ) {

          return new THREE.Vector3( x, y, z );

        }


        var Pool = {
          __pools: [],
          // Get a new Vector
          get: function() {
            if ( this.__pools.length > 0 ) {
              return this.__pools.pop();
            }
            console.log( "pool ran out!" )
            return null;
          },
          // Release a vector back into the pool
          add: function( v ) {
            this.__pools.push( v );
          }
        };


        for ( i = 0; i < particlesLength; i ++ ) {

          particles.vertices.push( newpos( Math.random() * 200 - 100, Math.random() * 100 + 150, Math.random() * 50 ) );
          Pool.add( i );

        }


        // Create pools of vectors

        attributes = {

          size:  { type: 'f', value: [] },
          pcolor: { type: 'c', value: [] }

        };

        var sprite = generateSprite() ;

        texture = new THREE.Texture( sprite );
        texture.needsUpdate = true;

        uniforms = {

          texture:   { type: "t", value: texture }

        };

        // PARAMETERS

        // Steadycounter
        // Life
        // Opacity
        // Hue Speed
        // Movement Speed

        function generateSprite() {
          var canvas = document.createElement( 'canvas' );
          canvas.width = 128;
          canvas.height = 128;

          var context = canvas.getContext( '2d' );

          context.beginPath();
          context.arc( 64, 64, 60, 0, Math.PI * 2, false) ;

          context.lineWidth = 0.5; //0.05
          context.stroke();
          context.restore();

          var gradient = context.createRadialGradient( canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2 );

          gradient.addColorStop( 0, 'rgba(255,255,255,1)' );
          gradient.addColorStop( 0.2, 'rgba(255,255,255,1)' );
          gradient.addColorStop( 0.4, 'rgba(200,200,200,1)' );
          gradient.addColorStop( 1, 'rgba(0,0,0,1)' );

          context.fillStyle = gradient;

          context.fill();

          return canvas;

        }


        var shaderMaterial = new THREE.ShaderMaterial( {
          uniforms: uniforms,
          attributes: attributes,

          vertexShader: document.getElementById( 'vertexshader' ).textContent,
          fragmentShader: document.getElementById( 'fragmentshader' ).textContent,

          blending: THREE.AdditiveBlending,
          depthWrite: false,
          transparent: true

        });

        particleCloud = new THREE.ParticleSystem( particles, shaderMaterial );